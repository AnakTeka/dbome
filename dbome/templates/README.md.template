# {PROJECT_NAME}

BigQuery View Management Project

> *"Mom, can we have dbt?"*  
> *"We have dbt at home."*  
> **dbt at home:** 🏠

This project uses [dbome](https://github.com/AnakTeka/dbome) to manage BigQuery views with **dbt-like functionality**, including automatic dependency resolution, template compilation, and deployment automation.

## ✨ Features

- **📝 Simplified SQL syntax** - No more CREATE OR REPLACE VIEW boilerplate!
- **🔄 dbt-like `ref()` syntax** - Use `{{ ref('view_name') }}` in your SQL
- **📊 Automatic dependency resolution** - Deploy views in correct order
- **🎯 Template compilation** - Jinja2-powered SQL templates
- **🚀 One-command deployment** - Deploy all views with proper dependencies
- **🔍 Validation & debugging** - Validate references and visualize dependencies
- **📁 Compiled SQL output** - See resolved SQL files for debugging
- **⚡ Git-based workflow** - Automatic deployment on commit

## 🛠️ Setup

### 1. Configure BigQuery

Edit `config.yaml` with your BigQuery project details:

```yaml
bigquery:
  project_id: "your-gcp-project-id"
  dataset_id: "your_dataset_name"
  location: "US"
```

### 2. Authentication

Choose one of these authentication methods:

#### Option A: Application Default Credentials (Recommended)
```bash
gcloud auth application-default login
```

#### Option B: Service Account Key
1. Create a service account in Google Cloud Console
2. Download the JSON key file
3. Update `config.yaml`:
   ```yaml
   google_application_credentials: "/path/to/service-account-key.json"
   ```

#### Option C: AWS SSM Parameter Store (for SageMaker/AWS environments)
1. Store your service account JSON in AWS SSM Parameter Store (base64 encoded)
2. Update `config.yaml`:
   ```yaml
   aws_ssm_credentials_parameter: "/sagemaker/production/XXXXXXXXXXXX"
   ```

## 📝 Writing SQL Views

Create SQL files in the `sql/views/` directory using **simplified dbt-like syntax**:

### Basic view (no dependencies):
```sql
-- sql/views/user_actions.sql
SELECT 
    user_id,
    action_type,
    action_timestamp,
    session_id
FROM `your-project.raw_data.events`
WHERE action_type IS NOT NULL
```

### View with dependencies using ref() syntax:
```sql
-- sql/views/user_metrics.sql
SELECT 
    user_id,
    COUNT(*) as total_actions,
    MAX(action_timestamp) as last_action_date,
    COUNT(DISTINCT session_id) as total_sessions
FROM {{ ref('user_actions') }}
GROUP BY user_id
```

### ✨ How it works:
- **Filename = View name**: `user_actions.sql` → `user_actions` view
- **Auto-wrapping**: System automatically adds `CREATE OR REPLACE VIEW` statement
- **No boilerplate**: Just write your SELECT statement!
- **Backwards compatible**: Files with existing `CREATE OR REPLACE VIEW` statements still work

## 🚀 Deployment

### Automatic Deployment (Git Hook)
Views are automatically deployed when you commit changes:

```bash
git add sql/views/
git commit -m "Add user analytics views"
# 🚀 Views are automatically deployed!
```

### Manual Deployment

**Option A: Using uv run (works from anywhere)**
```bash
# Deploy all views
uv run dbome run

# Dry run (see what would be deployed)
uv run dbome run --dry

# Deploy specific views by name
uv run dbome run user_metrics user_actions

# Deploy specific files
uv run dbome run --select sql/views/user_metrics.sql

# Compile templates without deploying
uv run dbome compile
```

**Option B: Activate virtual environment (faster for active development)**
```bash
# Activate the virtual environment (one-time setup)
source .venv/bin/activate  # Linux/Mac
# or
.venv\Scripts\activate     # Windows

# Now you can run commands directly (no uv run needed!)
dbome run
dbome run --dry
dbome run user_metrics user_actions
dbome run --select sql/views/user_metrics.sql
dbome compile

# Deactivate when done
deactivate
```

### Make Commands (Shortcuts)

| Command | Description |
|---------|-------------|
| `make deploy` | Deploy all views |
| `make dry-run` | Preview deployments |
| `make check` | Validate SQL syntax |
| `make compile` | Compile SQL templates to compiled/ directory |
| `make deps` | Show dependency graph |
| `make validate` | Validate all ref() references |
| `make clean` | Clean build artifacts |

## 🔧 dbome Commands Reference

**Note**: You can either use `uv run dbome <command>` or activate the virtual environment with `source .venv/bin/activate` and use `dbome <command>` directly.

| Command | Description |
|---------|-------------|
| `dbome run` | Deploy all views |
| `dbome run --dry` | Preview what would be deployed |
| `dbome run view_name` | Deploy specific view by name |
| `dbome run --select file.sql` | Deploy specific files |
| `dbome validate` | Check all references are valid |
| `dbome deps` | Show dependency graph |
| `dbome compile` | Generate compiled SQL files |
| `dbome init` | Initialize new project |

## 🔍 Advanced Features

### Dependency Visualization
```bash
uv run dbome deps    # Using uv run
dbome deps           # If venv activated
```

### Reference Validation
```bash
uv run dbome validate    # Using uv run
dbome validate           # If venv activated
```

### Compiled SQL Output

When `save_compiled: true` is enabled in config, compiled SQL files are saved to `compiled/views/`:

```bash
compiled/views/
├── user_actions.sql  # Auto-wrapped + resolved refs
└── user_metrics.sql  # Auto-wrapped + resolved refs
```

### Selective Deployment

Deploy only specific views:

```bash
# By view name (choose one method)
uv run dbome run user_metrics user_actions           # Using uv run
dbome run user_metrics user_actions                  # If venv activated

# By file path
uv run dbome run --select sql/views/user_metrics.sql sql/views/user_actions.sql    # Using uv run
dbome run --select sql/views/user_metrics.sql sql/views/user_actions.sql           # If venv activated

# Mix and match
uv run dbome run user_metrics --select sql/views/other_view.sql    # Using uv run
dbome run user_metrics --select sql/views/other_view.sql           # If venv activated
```

## 📁 Project Structure

```
your-project/
├── sql/views/              # Your SQL view files
│   ├── user_actions.sql
│   └── user_metrics.sql
├── config.yaml            # Your configuration
├── config.yaml.template   # Template with examples
├── compiled/views/         # Generated SQL (auto-created)
├── Makefile               # Shortcuts for common tasks
├── .python-version        # Python version (3.11)
└── .git/hooks/post-commit # Auto-deployment hook
```

## 🚀 Getting Started

1. **Write your SQL views** in `sql/views/`
2. **Choose your workflow**:
   - **Quick/occasional use**: `uv run dbome run --dry` (works from anywhere)
   - **Active development**: `source .venv/bin/activate` then `dbome run --dry` (faster)
   - **Make shortcuts**: `make dry-run` (convenient aliases)
3. **Test with dry run**: Verify your changes work correctly
4. **Deploy**: `dbome run` or `make deploy`
5. **Commit changes**: Git will auto-deploy future changes!

## 🎯 Perfect for SageMaker

AWS SSM Parameter Store integration makes this ideal for SageMaker environments:

```yaml
# config.yaml
aws_ssm_credentials_parameter: "/sagemaker/production/GOOGLE_CREDS"
```

dbome automatically retrieves and decodes your service account credentials from SSM.

## 🆘 Troubleshooting

### Validation Errors
```bash
# Check for issues (choose one method)
uv run dbome validate          # Using uv run
dbome validate                 # If venv activated

# View dependency graph
uv run dbome deps              # Using uv run  
dbome deps                     # If venv activated
```

### Deployment Issues
```bash
# Test with dry run first (choose one method)
uv run dbome run --dry         # Using uv run
dbome run --dry                # If venv activated

# Check specific views
uv run dbome run --dry view_name   # Using uv run
dbome run --dry view_name          # If venv activated
```

## 📚 Documentation

For more detailed documentation, visit the [dbome](https://github.com/AnakTeka/dbome) repository.

## 🤝 Contributing

1. Write your SQL views in `sql/views/`
2. Test with `make dry-run`
3. Commit your changes
4. Views are automatically deployed!

---

Generated by dbome (dbt at home) `dbome init` 