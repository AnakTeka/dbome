# {PROJECT_NAME}

BigQuery View Management Project

> *"Mom, can we have dbt?"*  
> *"We have dbt at home."*  
> **dbt at home:** 🏠

This project uses [dbome](https://github.com/your-repo/dbome) to manage BigQuery views with **dbt-like functionality**, including automatic dependency resolution, template compilation, and deployment automation.

## ✨ Features

- **📝 Simplified SQL syntax** - No more CREATE OR REPLACE VIEW boilerplate!
- **🔄 dbt-like `ref()` syntax** - Use `{{ ref('view_name') }}` in your SQL
- **📊 Automatic dependency resolution** - Deploy views in correct order
- **🎯 Template compilation** - Jinja2-powered SQL templates
- **🚀 One-command deployment** - Deploy all views with proper dependencies
- **🔍 Validation & debugging** - Validate references and visualize dependencies
- **📁 Compiled SQL output** - See resolved SQL files for debugging
- **⚡ Git-based workflow** - Automatic deployment on commit

## 🛠️ Setup

### 1. Configure BigQuery

Edit `config.yaml` with your BigQuery project details:

```yaml
bigquery:
  project_id: "your-gcp-project-id"
  dataset_id: "your_dataset_name"
  location: "US"
```

### 2. Authentication

Choose one of these authentication methods:

#### Option A: Application Default Credentials (Recommended)
```bash
gcloud auth application-default login
```

#### Option B: Service Account Key
1. Create a service account in Google Cloud Console
2. Download the JSON key file
3. Update `config.yaml`:
   ```yaml
   google_application_credentials: "/path/to/service-account-key.json"
   ```

### 3. Install Dependencies (Optional)

If you want to run the setup script:

```bash
./setup.sh
```

## 📝 Writing SQL Views

Create SQL files in the `sql/views/` directory using **simplified dbt-like syntax**:

### Basic view (no dependencies):
```sql
-- sql/views/user_actions.sql
SELECT 
    user_id,
    action_type,
    action_timestamp,
    session_id
FROM `your-project.raw_data.events`
WHERE action_type IS NOT NULL
```

### View with dependencies using ref() syntax:
```sql
-- sql/views/user_metrics.sql
SELECT 
    user_id,
    COUNT(*) as total_actions,
    MAX(action_timestamp) as last_action_date,
    COUNT(DISTINCT session_id) as total_sessions
FROM {{ ref('user_actions') }}
GROUP BY user_id
```

### ✨ How it works:
- **Filename = View name**: `user_actions.sql` → `user_actions` view
- **Auto-wrapping**: System automatically adds `CREATE OR REPLACE VIEW` statement
- **No boilerplate**: Just write your SELECT statement!
- **Backwards compatible**: Files with existing `CREATE OR REPLACE VIEW` statements still work

## 🚀 Deployment

### Automatic Deployment (Git Hook)
Views are automatically deployed when you commit changes:

```bash
git add sql/views/
git commit -m "Add user analytics views"
# 🚀 Views are automatically deployed!
```

### Manual Deployment

```bash
# Deploy all views
dbome

# Dry run (see what would be deployed)
dbome --dry-run

# Deploy specific files only
dbome --files sql/views/user_metrics.sql

# Compile templates without deploying
dbome --compile-only
```

### Make Commands

| Command | Description |
|---------|-------------|
| `make deploy` | Deploy all views |
| `make dry-run` | Preview deployments |
| `make check` | Validate SQL syntax |
| `make compile` | Compile SQL templates to compiled/ directory |
| `make setup` | Run setup script |
| `make clean` | Clean build artifacts |

## 🔍 Advanced Features

### Dependency Visualization
```bash
dbome --show-deps
```

### Reference Validation
```bash
dbome --validate-refs
```

### Compiled SQL Output

When `save_compiled: true` is enabled in config, compiled SQL files are saved to `compiled/views/`:

```bash
compiled/views/
├── user_actions.sql  # Auto-wrapped + resolved refs
└── user_metrics.sql  # Auto-wrapped + resolved refs
```

## 📚 Documentation

For more detailed documentation, visit the [dbome](https://github.com/your-repo/dbome) repository.

## 🤝 Contributing

1. Write your SQL views in `sql/views/`
2. Test with `make dry-run`
3. Commit your changes
4. Views are automatically deployed!

---

Generated by dbome (dbt at home) `dbome init` 