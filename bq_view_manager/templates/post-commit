#!/bin/bash
#
# Git post-commit hook to deploy SQL views to BigQuery
# This script runs automatically after each commit that affects sql/views/
#

# Check if any files in sql/views/ were changed in this commit
changed_view_files=$(git diff-tree --no-commit-id --name-only -r HEAD | grep "^sql/views/.*\.sql$")

if [[ -z "$changed_view_files" ]]; then
    echo "🔄 No SQL view files changed, skipping BigQuery deployment"
    exit 0
fi

echo "🔄 Post-commit hook: SQL view files changed, deploying to BigQuery..."
echo "📝 Changed files:"
echo "$changed_view_files" | sed 's/^/  - /'

# Convert newline-separated list to space-separated array for command line
files_array=()
while IFS= read -r line; do
    files_array+=("$line")
done <<< "$changed_view_files"

# Check if we're in a virtual environment or if uv is available
if [[ -z "$VIRTUAL_ENV" ]] && [[ ! -d ".venv" ]] && ! command -v uv >/dev/null 2>&1; then
    echo "⚠️  Warning: No virtual environment or uv detected. Make sure dependencies are installed."
fi

# Check if config file exists
if [[ ! -f "config.yaml" ]]; then
    echo "❌ Config file not found. Please create config.yaml with your BigQuery settings."
    exit 1
fi

# Run the deployment script with specific files
echo "🚀 Processing ${#files_array[@]} changed SQL file(s)..."

if command -v uv >/dev/null 2>&1 && [[ -d ".venv" ]]; then
    # Use uv to run in the virtual environment, passing the specific files
    uv run python -m bq_view_manager.main --files "${files_array[@]}"
else
    # Fallback to regular python
    python -m bq_view_manager.main --files "${files_array[@]}"
fi

# Check if deployment was successful
if [[ $? -eq 0 ]]; then
    echo "✅ BigQuery views deployed successfully!"
else
    echo "❌ BigQuery deployment failed. Check the output above for errors."
    exit 1
fi 